Hello friends, my name is Sergey and today i will tell you about one of the newest React features - Hooks.
This video was made for Rolling Scopes School program, slides behind me i create with Reveal.js framework.
In a couple of words Hooks was introduced in 2018 and they allow us to use functional oriented paradigm in addition to object oriented programming paradigm.
So, what Hooks are and what they can offer to us? Adds local state and lifecycle-hooks to functional components. Use all or almost all React features without using React built-in classes. Allow you to reuse stateful logic without changing your component hierarchy. Let you split one component into smaller functions based on what pieces are related, rather than forcing a split based on lifecycle methods.
For what reasons Hooks where invented? Main reason is big problem with “wrapper hell” of components surrounded by layers of providers, consumers, higher-order components, render props, and other abstractions. So complex components become harder and harder to understand. And classes confuse both people and machines and they can be a large barrier to learning React.
Lets talk a bit about Functions versus React Classes. Functional components are much easier to read and test because they are plain JavaScript functions without state or lifecycle-hooks. It is easier to separate container and presentational components because you need to think more about your component’s state if you don’t have access to setState in your component. And file size is reduced if you are using functional components over classes.
So, how to use Hooks? Hooks are now available with the release of React version 16.8. You only call Hooks from React Functions and at the top level.
Now let's talk about two main React Hooks useState and useEffect. First - useState. It Use React State within functional components. Updating a state variable always replaces it instead of merging it. React will remember its current value between re-renders, and provide the most recent one to our function.
Let's look at simple example with useState Hook. It just a counter which hold numbers of user's clicks on button. On first line of code we import useState Hook from React. On fourth line we declare useState Hook with initial value zero. UseState return to us a pair of values, which we give names: first will be count that hold numbers of counts, and second is a function which changes count. And on ninth line we just call setCount function with onClick method. Looks quite simple and elegant.
Now useEffect Hook. UseEffect Hook lets you perform side effects in function components. Data fetching, setting up a subscription, and manually changing the DOM in React components are all examples of side effects. You can think of useEffect Hook as componentDidMount, componentDidUpdate, and componentWillUnmount combined. You can use multiple useEffect within a single component.
Now let's expand ours last example with useEffect Hook. Let's do that document title display message with the counter and after each increase it should change. In React Classes for that task we would use componentDidMount for the first render and componentDidUpdate for next renders update. But now we don't have a classes, what should we do? The solution is very simple. First of all on the first line of code we import useEffect Hook from React. Later, on sixth line we call it after declare useState Hook. On useEffect we just pass function that use browser document API that change title to the string which we want and pass count value to it. And voila it will work. No componentDidMount, no componentDidUpdate, code is much shorter and easier to read and understand.
You can always create your own hooks. Remember, components and Hooks are just functions. If you want to share reusable logic, just extract it to a separate function. Hooks always start with a "use" keyword for linting purposes, for example useState, useEffect, useReducer, useContext etc. Using useState and useEffect you can already create useful custom hooks.
and the last question i should answer is should i switch to Hooks? THe answer is maybe. You don't need to rewrite all of your components with React Hooks. You can try Hooks in a few components without rewriting any existing code. Hooks are 100% backwards-compatible. React Classes will still be supported in the future and there are no plans to remove them. Best practices are still a "work in progress". So try it and maybe you likes Hooks more than Classes.
And that's all, thank you for your attention.
